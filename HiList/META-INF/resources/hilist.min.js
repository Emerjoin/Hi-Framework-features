    /**
     * Hi list component
     * @author The Hi Framework Team
     */

    var hiList =  {};


    /**
     * The extensions should override methods of this class.
     */
    hiList.baseExtension = function(){


        /**
         * Transform the hiList HTML before it gets compiled.
         * @param html the hiList HTML
         * @param scope the hiList angular scope
         */
        this.$preTransform = function(html,scope){


        };


        /**
         * Notifies the extension before filtering is executed.
         * @param scope the angular scope
         * @param DOM element of the hiList instance
         * @param filter the filter properties
         * @param ordering the data ordering properties
         * */
        this.$beforeFilter = function(scope,element, filter,ordering){



        };

        /**
         *
         * @param scope
         * @param element
         * @param display
         */
        this.$beforeDisplay = function(scope,element,display){



        };

        this.$startup = function(){



        };


    };

    hiList.extensions = {};
    hiList.extend = function(factory){

        var extInstance = new hiList.baseExtension();
        var extension = factory.call({},extInstance);

        if(!(extension.hasOwnProperty("build")&&extension.hasOwnProperty("name")))
            throw new Error("A hiList extension should contains at least the name property and the build function");


        extension.$newInstance = function(){

            //use dependency injection
            if(extension.hasOwnProperty("inject")) {


                var fn =  extension.build;
                fn["$inject"] = extension.inject;

                console.log(fn);
                return angular.injector().invoke(fn);

            }


            //Just call the damm function
            return extension.build.call({});


        };

        hiList.extensions[extension.name] = extension;

    };

    hiList.getExtension = function(name){

        if(!hiList.extensions.hasOwnProperty(name))
            throw new Error("Extension not encountered : "+name);


        var extension = hiList.extensions[name];

        //There is a single instance if the extension in the entire application
        if(extension.hasOwnProperty("singleton")){

            if(extension.hasOwnProperty("instance")){

                return extension.instance;

            }

            extension.instance = extension.$newInstance();
            extension.instance.$startup();
            hiList[name] = extension;
            return extension.instance;

        }

        //The extension supports multiple instances : one instance per hiList
        var extension = extension.$newInstance();
        extension.$startup();
        return extension;


    };



    //---Extension sample begins here---

    hiList.extend(function(extension){

        return {

            name:"name1",
            singleton:false,
            //inject : ['$compile'],
            build: function(){

                //Override the instance methods here
                extension.$startup = function(html){

                    console.log("I'm just a stupid extension");


                };

                return extension;

            }

        };

    });
    //---Extension sample ends here---*/



    hiList.directive = function($compile){

        var directive = {};
        directive.restrict='E';
        directive.link = function($scope,element,attributes) {

            //The public method
            $scope.refresh = function(){

                //TODO: Implement this function


            };

            $scope.goToPage = function(number){

                //TODO: Implement this function


            };

            $scope.goToLastPage = function() {

                //TODO: Implement this function

            };

            $scope.goToFirstPage = function(){

                //TODO: Implement this function

            };

            $scope.getCurrentPage = function(){

                //TODO: Implement this function

            };

            $scope.goToNextPage = function(){

                //TODO: Implement this function

            };

            $scope.goToPreviousPage = function(){

                //TODO: Implement this function

            };

            //Extension instances for this particular List
            $scope.$extensions = {};
            $scope.$extensionList = [];

            $scope.$bootExtensions = function(){

                //Load the extensions for this hiList instance
                var props = Hi.$util.getKidProperties('plugin',attributes['$attr']);
                if(props.length>0){

                    $scope.$extensionList = props;

                    for(var index in props){



                        var item = props[index];
                        if(typeof item=="string"){

                            var extension  = hiList.getExtension(item);
                            $scope.$extensions[item] = extension;

                        }



                    }



                }

            };



            $scope.$bootExtensions();

            $scope.rows = [{id:1,name:"Mario Junior"}];

            if(!attributes.hasOwnProperty("name"))
                throw new Error("The list element should have a <name> attribute");

            if(!attributes.hasOwnProperty("repeatElement"))
                throw new Error("The list element should have a <repeat-element> attribute that specifies the element that should be repeated.");


            if(!attributes.hasOwnProperty("item"))
                throw new Error("The list element should have a <item> attribute that specifies the name to repeat");


            var eachItem = attributes.item;
            var scopeParent = $scope.$parent;
            var listName = attributes.name;
            var listRepeatElement = attributes["repeatElement"];


            var jqRepeatable = element.find(listRepeatElement);

            if(jqRepeatable.length==0)
                throw new Error("Repeatable element could not be found using the specifiend jQuery selector : "+listRepeatElement);


            if(scopeParent.hasOwnProperty(listName))
                console.warn("The list name <"+listName+"> is already in use on its parent scope");


            //The attributes of the element
            $scope.$attributes = attributes;

            //Add the ng-repeat
            jqRepeatable.attr("ng-repeat",eachItem+" in rows");


            //TODO: Add the header

            //TODO: Add the footer

            //TODO: Call plugins to transform the markup


            var angularElement = angular.element($(element).html());


            var compile = $compile(angularElement,function(){

                //TODO: Call the plugins to transform the scope

            });
            element.html(angularElement);

            //Add the scope object to the its parent
            scopeParent[listName] = $scope;

            //
            compile($scope);


        };

        return directive;


    };


    Hi.$ui.js.component("list",hiList.directive);